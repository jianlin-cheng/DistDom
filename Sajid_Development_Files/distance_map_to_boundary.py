# -*- coding: utf-8 -*-
"""distance_map_to_boundary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qq-6AH3HN0N7gUd-zzf2HA36CqdDsO7o
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchsummary import summary

batch_size = 1
input = torch.randn(batch_size, 10, 863, 863).cuda()
input_sequence = torch.randn(batch_size, 20, 863).cuda()
tgt = torch.randn(1,1,408,50)
print(input.size()[1])

# 3x3 convolution
def conv3x3(in_channels, out_channels, stride=1):
    return nn.Conv2d(in_channels, out_channels, kernel_size=3, 
                     stride=stride, padding=1, bias=False)

def conv1x1(in_channels, out_channels, stride=1):
    return nn.Conv2d(in_channels, out_channels, kernel_size=1, 
                     stride=stride, padding=0, bias=False)


class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1, downsample=None):
        super(ResidualBlock, self).__init__()
        self.conv1 = conv3x3(in_channels, out_channels, stride)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(out_channels, out_channels)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.downsample = downsample
        
    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if self.downsample:
            residual = self.downsample(x)
        out += residual
        out = self.relu(out)
        return out

class Net(nn.Module):
    def __init__(self, blocks, block, in_channel, out_channel):
        super(Net, self).__init__()
        layer = []
        layer.append(block(in_channel,out_channel))
        for i in range(0,blocks):
          layer.append(block(out_channel,out_channel))
        self.network = nn.Sequential(*layer)
        self.conv1x1 = conv1x1(out_channel,1)
        self.maxpoolbyrow = nn.AdaptiveMaxPool2d(output_size=(50,50))
    def reinitialize_maxpool(self,x):
        self.maxpoolbyrow = nn.AdaptiveMaxPool2d(output_size=(x.size()[-1],50))
        

    def forward(self, x):
        out = self.network(x)
        # self.maxpoolbyrow = nn.AdaptiveMaxPool2d(output_size=(x.size()[-1],50))
        # self.reinitialize_maxpool(x)
        # out = self.maxpoolbyrow(out)
        out = F.adaptive_max_pool2d(out,output_size=(x.size()[-1],50))
        # out = self.conv1x1(out)
        out = out.view(batch_size,500,-1)
        return out

net = Net(10,ResidualBlock,10,10).cuda()
summary(net,(10,100,100))
output = net(input.cuda())
print(output.size())

def conv3x3_1d(in_channels, out_channels, stride=1):
    return nn.Conv1d(in_channels, out_channels, kernel_size=3, 
                     stride=stride, padding=1, bias=False)


class ResidualBlock_1d(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1, downsample=None):
        super(ResidualBlock_1d, self).__init__()
        self.conv1 = conv3x3_1d(in_channels, out_channels, stride)
        self.bn1 = nn.BatchNorm1d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3_1d(out_channels, out_channels)
        self.bn2 = nn.BatchNorm1d(out_channels)
        self.downsample = downsample
        
    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if self.downsample:
            residual = self.downsample(x)
        out += residual
        out = self.relu(out)
        return out

class Bi_RNN(nn.Module):

    def __init__(self, input_dim, hidden_dim, batch_size, output_dim=11, num_layers=2, rnn_type='LSTM'):
        super(Bi_RNN, self).__init__()
        self.input_dim = input_dim
        self.hidden_dim = hidden_dim
        self.batch_size = batch_size
        self.num_layers = num_layers

        #Define the initial linear hidden layer
        self.init_linear = nn.Linear(self.input_dim, self.input_dim)

        # Define the LSTM layer
        self.lstm = eval('nn.' + rnn_type)(self.input_dim, self.hidden_dim, self.num_layers, batch_first=True, bidirectional=True)

        # Define the output layer
        self.linear = nn.Linear(self.hidden_dim * 2, output_dim)

    def init_hidden(self):
        # This is what we'll initialise our hidden state as
        return (torch.zeros(self.num_layers, self.batch_size, self.hidden_dim),
                torch.zeros(self.num_layers, self.batch_size, self.hidden_dim))

    def forward(self, input):
        #Forward pass through initial hidden layer
        linear_input = self.init_linear(input)

        # Forward pass through LSTM layer
        # shape of lstm_out: [batch_size, input_size ,hidden_dim]
        # shape of self.hidden: (a, b), where a and b both
        # have shape (batch_size, num_layers, hidden_dim).
        lstm_out, self.hidden = self.lstm(linear_input)

        # Can pass on the entirety of lstm_out to the next layer if it is a seq2seq prediction
        y_pred = self.linear(lstm_out)
        return y_pred

class Net_1d(nn.Module):
    def __init__(self, blocks, block, in_channel, out_channel):
        super(Net_1d, self).__init__()
        layer = []
        layer.append(block(in_channel,out_channel))
        for i in range(0,blocks):
          layer.append(block(out_channel,out_channel))
        # layer.append(Bi_RNN(46,20,1,1))
        self.network = nn.Sequential(*layer)
        self.bislstm = Bi_RNN(20,20,batch_size=batch_size,output_dim=500)
        self.maxpoolbyrow = nn.AdaptiveMaxPool2d(output_size=(50,50))
    def reinitialize_maxpool(self,x):
        self.maxpoolbyrow = nn.AdaptiveMaxPool2d(output_size=(x.size()[-1],50))
        # self.BiLSTM = Bi_RNN(46,20,1,50)

    def forward(self, x):
        out = self.network(x)
        out = out.permute(0,2,1)
        out = self.bislstm(out)
        # self.maxpoolbyrow = nn.AdaptiveMaxPool2d(output_size=(x.size()[-1],50))
        # self.reinitialize_maxpool(x)
        # out = self.maxpoolbyrow(out)
        # out = F.adaptive_max_pool2d(out,output_size=(x.size()[-1],50))
        # out = self.BiLSTM(out)
        out = out.permute(0,2,1)
        return out

m = ResidualBlock_1d(100,100).cuda()
m2 = Net_1d(10,ResidualBlock_1d,20,20).cuda()
# m = nn.Conv1d(46, 46, 3, stride=1,padding=1).cuda()
# print(summary(m2,(1,408,46)))
output_sequence = m2(input_sequence.cuda())
print(output_sequence.size())

class Attention(nn.Module):
    """ Applies attention mechanism on the `context` using the `query`.

    **Thank you** to IBM for their initial implementation of :class:`Attention`. Here is
    their `License
    <https://github.com/IBM/pytorch-seq2seq/blob/master/LICENSE>`__.

    Args:
        dimensions (int): Dimensionality of the query and context.
        attention_type (str, optional): How to compute the attention score:

            * dot: :math:`score(H_j,q) = H_j^T q`
            * general: :math:`score(H_j, q) = H_j^T W_a q`

    Example:

         >>> attention = Attention(256)
         >>> query = torch.randn(5, 1, 256)
         >>> context = torch.randn(5, 5, 256)
         >>> output, weights = attention(query, context)
         >>> output.size()
         torch.Size([5, 1, 256])
         >>> weights.size()
         torch.Size([5, 1, 5])
    """

    def __init__(self, dimensions, attention_type='general'):
        super(Attention, self).__init__()

        if attention_type not in ['dot', 'general']:
            raise ValueError('Invalid attention type selected.')

        self.attention_type = attention_type
        if self.attention_type == 'general':
            self.linear_in = nn.Linear(dimensions, dimensions, bias=False)

        self.linear_out = nn.Linear(dimensions * 2, dimensions, bias=False)
        self.softmax = nn.Softmax(dim=-1)
        self.tanh = nn.Tanh()

    def forward(self, query, context):
        """
        Args:
            query (:class:`torch.FloatTensor` [batch size, output length, dimensions]): Sequence of
                queries to query the context.
            context (:class:`torch.FloatTensor` [batch size, query length, dimensions]): Data
                overwhich to apply the attention mechanism.

        Returns:
            :class:`tuple` with `output` and `weights`:
            * **output** (:class:`torch.LongTensor` [batch size, output length, dimensions]):
              Tensor containing the attended features.
            * **weights** (:class:`torch.FloatTensor` [batch size, output length, query length]):
              Tensor containing attention weights.
        """
        batch_size, output_len, dimensions = query.size()
        query_len = context.size(1)

        if self.attention_type == "general":
            query = query.reshape(batch_size * output_len, dimensions)
            query = self.linear_in(query)
            query = query.reshape(batch_size, output_len, dimensions)

        # TODO: Include mask on PADDING_INDEX?

        # (batch_size, output_len, dimensions) * (batch_size, query_len, dimensions) ->
        # (batch_size, output_len, query_len)
        attention_scores = torch.bmm(query, context.transpose(1, 2).contiguous())

        # Compute weights across every context sequence
        attention_scores = attention_scores.view(batch_size * output_len, query_len)
        attention_weights = self.softmax(attention_scores)
        attention_weights = attention_weights.view(batch_size, output_len, query_len)

        # (batch_size, output_len, query_len) * (batch_size, query_len, dimensions) ->
        # (batch_size, output_len, dimensions)
        mix = torch.bmm(attention_weights, context)

        # concat -> (batch_size * output_len, 2*dimensions)
        combined = torch.cat((mix, query), dim=2)
        combined = combined.view(batch_size * output_len, 2 * dimensions)

        # Apply linear_out on every 2nd dimension of concat
        # output -> (batch_size, output_len, dimensions)
        output = self.linear_out(combined).view(batch_size, output_len, dimensions)
        output = self.tanh(output)

        return output, attention_weights

attention = Attention(100)
query = torch.randn(1, 1, 100)
context = torch.randn(1, 500, 100)
output, weights = attention(query, context)
print(output.size())

class Net_Final(nn.Module):
    def __init__(self, blocks,L):
        super(Net_Final, self).__init__()
        self.network_2d = Net(blocks, ResidualBlock, 10, 10)
        self.network_1d = Net_1d(blocks, ResidualBlock_1d, 20, 20)
        self.attention = Attention(L)
        self.Transformer = nn.Transformer(L,nhead=1)

    def forward(self, x_2d, x_1d, tgt):
        out_2d = self.network_2d(x_2d)
        out_1d = self.network_1d(x_1d)
        # print(out_2d.size(),out_1d.size())
        # output, weights = self.attention(out_1d,out_2d)
        output = torch.cat((out_2d,out_1d),dim=1)
        print(output.permute(1,0,2).size(),tgt.permute(1,0,2).size())
        output = self.Transformer(output.permute(1,0,2), tgt.permute(1,0,2))
        return output


Final_Network = Net_Final(blocks = 10, L= 863).cuda()
tgt = torch.randn(1,1,863).cuda()
output_final = Final_Network(input,input_sequence,tgt)

print(output_final.size())

transformer_model = nn.Transformer(nhead=16, num_encoder_layers=12)
src = torch.rand((10, 32, 512))
tgt = torch.rand((20, 32, 512))
out = transformer_model(src, tgt)
print(out.size())

criterion = nn.BCEWithLogitsLoss().cuda()
optimizer = optim.Adam(Final_Network.parameters(),lr=0.001)
target = torch.empty(batch_size, 1, 863).random_(2).cuda()
# output = loss(output_final, target)
# output.backward()

for epoch in range(0,100):
  Final_Network.train()
  optimizer.zero_grad()
  output_final = Final_Network(input,input_sequence,tgt)
  loss = criterion(output_final,target)
  loss.backward()
  optimizer.step()
  print("Epoch: {0} Loss: {1}".format(epoch,loss.item()))